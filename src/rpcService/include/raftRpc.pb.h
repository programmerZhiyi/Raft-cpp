// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftRpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftRpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftRpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftRpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftRpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftRpc_2eproto;
namespace raftRpcSpace {
class AppendEntriesArguments;
class AppendEntriesArgumentsDefaultTypeInternal;
extern AppendEntriesArgumentsDefaultTypeInternal _AppendEntriesArguments_default_instance_;
class AppendEntriesResults;
class AppendEntriesResultsDefaultTypeInternal;
extern AppendEntriesResultsDefaultTypeInternal _AppendEntriesResults_default_instance_;
class InstallSnapshotArguments;
class InstallSnapshotArgumentsDefaultTypeInternal;
extern InstallSnapshotArgumentsDefaultTypeInternal _InstallSnapshotArguments_default_instance_;
class InstallSnapshotResults;
class InstallSnapshotResultsDefaultTypeInternal;
extern InstallSnapshotResultsDefaultTypeInternal _InstallSnapshotResults_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVoteArguments;
class RequestVoteArgumentsDefaultTypeInternal;
extern RequestVoteArgumentsDefaultTypeInternal _RequestVoteArguments_default_instance_;
class RequestVoteResults;
class RequestVoteResultsDefaultTypeInternal;
extern RequestVoteResultsDefaultTypeInternal _RequestVoteResults_default_instance_;
}  // namespace raftRpcSpace
PROTOBUF_NAMESPACE_OPEN
template<> ::raftRpcSpace::AppendEntriesArguments* Arena::CreateMaybeMessage<::raftRpcSpace::AppendEntriesArguments>(Arena*);
template<> ::raftRpcSpace::AppendEntriesResults* Arena::CreateMaybeMessage<::raftRpcSpace::AppendEntriesResults>(Arena*);
template<> ::raftRpcSpace::InstallSnapshotArguments* Arena::CreateMaybeMessage<::raftRpcSpace::InstallSnapshotArguments>(Arena*);
template<> ::raftRpcSpace::InstallSnapshotResults* Arena::CreateMaybeMessage<::raftRpcSpace::InstallSnapshotResults>(Arena*);
template<> ::raftRpcSpace::LogEntry* Arena::CreateMaybeMessage<::raftRpcSpace::LogEntry>(Arena*);
template<> ::raftRpcSpace::RequestVoteArguments* Arena::CreateMaybeMessage<::raftRpcSpace::RequestVoteArguments>(Arena*);
template<> ::raftRpcSpace::RequestVoteResults* Arena::CreateMaybeMessage<::raftRpcSpace::RequestVoteResults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftRpcSpace {

// ===================================================================

class LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {};
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kLogTermFieldNumber = 2,
    kLogIndexFieldNumber = 3,
  };
  // bytes Command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 LogTerm = 2;
  void clear_logterm();
  ::PROTOBUF_NAMESPACE_ID::int32 logterm() const;
  void set_logterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logterm() const;
  void _internal_set_logterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LogIndex = 3;
  void clear_logindex();
  ::PROTOBUF_NAMESPACE_ID::int32 logindex() const;
  void set_logindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logindex() const;
  void _internal_set_logindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int32 logterm_;
  ::PROTOBUF_NAMESPACE_ID::int32 logindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesArguments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.AppendEntriesArguments) */ {
 public:
  inline AppendEntriesArguments() : AppendEntriesArguments(nullptr) {};
  virtual ~AppendEntriesArguments();

  AppendEntriesArguments(const AppendEntriesArguments& from);
  AppendEntriesArguments(AppendEntriesArguments&& from) noexcept
    : AppendEntriesArguments() {
    *this = ::std::move(from);
  }

  inline AppendEntriesArguments& operator=(const AppendEntriesArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesArguments& operator=(AppendEntriesArguments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesArguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesArguments* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesArguments*>(
               &_AppendEntriesArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendEntriesArguments& a, AppendEntriesArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesArguments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesArguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesArguments* New() const final {
    return CreateMaybeMessage<AppendEntriesArguments>(nullptr);
  }

  AppendEntriesArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesArguments& from);
  void MergeFrom(const AppendEntriesArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.AppendEntriesArguments";
  }
  protected:
  explicit AppendEntriesArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .raftRpcSpace.LogEntry Entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raftRpcSpace::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcSpace::LogEntry >*
      mutable_entries();
  private:
  const ::raftRpcSpace::LogEntry& _internal_entries(int index) const;
  ::raftRpcSpace::LogEntry* _internal_add_entries();
  public:
  const ::raftRpcSpace::LogEntry& entries(int index) const;
  ::raftRpcSpace::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcSpace::LogEntry >&
      entries() const;

  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LeaderId = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PrevLogIndex = 3;
  void clear_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PrevLogTerm = 4;
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LeaderCommit = 6;
  void clear_leadercommit();
  ::PROTOBUF_NAMESPACE_ID::int32 leadercommit() const;
  void set_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leadercommit() const;
  void _internal_set_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.AppendEntriesArguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcSpace::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::int32 leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.AppendEntriesResults) */ {
 public:
  inline AppendEntriesResults() : AppendEntriesResults(nullptr) {};
  virtual ~AppendEntriesResults();

  AppendEntriesResults(const AppendEntriesResults& from);
  AppendEntriesResults(AppendEntriesResults&& from) noexcept
    : AppendEntriesResults() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResults& operator=(const AppendEntriesResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResults& operator=(AppendEntriesResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResults* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResults*>(
               &_AppendEntriesResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesResults& a, AppendEntriesResults& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResults* New() const final {
    return CreateMaybeMessage<AppendEntriesResults>(nullptr);
  }

  AppendEntriesResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResults& from);
  void MergeFrom(const AppendEntriesResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.AppendEntriesResults";
  }
  protected:
  explicit AppendEntriesResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kUpdateNextIndexFieldNumber = 3,
    kAppStateFieldNumber = 4,
  };
  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 UpdateNextIndex = 3;
  void clear_updatenextindex();
  ::PROTOBUF_NAMESPACE_ID::int32 updatenextindex() const;
  void set_updatenextindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updatenextindex() const;
  void _internal_set_updatenextindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AppState = 4;
  void clear_appstate();
  ::PROTOBUF_NAMESPACE_ID::int32 appstate() const;
  void set_appstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appstate() const;
  void _internal_set_appstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.AppendEntriesResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatenextindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 appstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteArguments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.RequestVoteArguments) */ {
 public:
  inline RequestVoteArguments() : RequestVoteArguments(nullptr) {};
  virtual ~RequestVoteArguments();

  RequestVoteArguments(const RequestVoteArguments& from);
  RequestVoteArguments(RequestVoteArguments&& from) noexcept
    : RequestVoteArguments() {
    *this = ::std::move(from);
  }

  inline RequestVoteArguments& operator=(const RequestVoteArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArguments& operator=(RequestVoteArguments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteArguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteArguments* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArguments*>(
               &_RequestVoteArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestVoteArguments& a, RequestVoteArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArguments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteArguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteArguments* New() const final {
    return CreateMaybeMessage<RequestVoteArguments>(nullptr);
  }

  RequestVoteArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteArguments& from);
  void MergeFrom(const RequestVoteArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.RequestVoteArguments";
  }
  protected:
  explicit RequestVoteArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CandidateId = 2;
  void clear_candidateid();
  ::PROTOBUF_NAMESPACE_ID::int32 candidateid() const;
  void set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidateid() const;
  void _internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastLogIndex = 3;
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastLogTerm = 4;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.RequestVoteArguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidateid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.RequestVoteResults) */ {
 public:
  inline RequestVoteResults() : RequestVoteResults(nullptr) {};
  virtual ~RequestVoteResults();

  RequestVoteResults(const RequestVoteResults& from);
  RequestVoteResults(RequestVoteResults&& from) noexcept
    : RequestVoteResults() {
    *this = ::std::move(from);
  }

  inline RequestVoteResults& operator=(const RequestVoteResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResults& operator=(RequestVoteResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResults* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResults*>(
               &_RequestVoteResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestVoteResults& a, RequestVoteResults& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResults* New() const final {
    return CreateMaybeMessage<RequestVoteResults>(nullptr);
  }

  RequestVoteResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResults& from);
  void MergeFrom(const RequestVoteResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.RequestVoteResults";
  }
  protected:
  explicit RequestVoteResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
    kVoteStateFieldNumber = 3,
  };
  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool VoteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // int32 VoteState = 3;
  void clear_votestate();
  ::PROTOBUF_NAMESPACE_ID::int32 votestate() const;
  void set_votestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_votestate() const;
  void _internal_set_votestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.RequestVoteResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  bool votegranted_;
  ::PROTOBUF_NAMESPACE_ID::int32 votestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotArguments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.InstallSnapshotArguments) */ {
 public:
  inline InstallSnapshotArguments() : InstallSnapshotArguments(nullptr) {};
  virtual ~InstallSnapshotArguments();

  InstallSnapshotArguments(const InstallSnapshotArguments& from);
  InstallSnapshotArguments(InstallSnapshotArguments&& from) noexcept
    : InstallSnapshotArguments() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotArguments& operator=(const InstallSnapshotArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotArguments& operator=(InstallSnapshotArguments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotArguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotArguments* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotArguments*>(
               &_InstallSnapshotArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstallSnapshotArguments& a, InstallSnapshotArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotArguments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotArguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotArguments* New() const final {
    return CreateMaybeMessage<InstallSnapshotArguments>(nullptr);
  }

  InstallSnapshotArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotArguments& from);
  void MergeFrom(const InstallSnapshotArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.InstallSnapshotArguments";
  }
  protected:
  explicit InstallSnapshotArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kLastIncludedIndexFieldNumber = 3,
    kLastIncludedTermFieldNumber = 4,
  };
  // bytes Data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LeaderId = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastIncludedIndex = 3;
  void clear_lastincludedindex();
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludedindex() const;
  void set_lastincludedindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastincludedindex() const;
  void _internal_set_lastincludedindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LastIncludedTerm = 4;
  void clear_lastincludedterm();
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludedterm() const;
  void set_lastincludedterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastincludedterm() const;
  void _internal_set_lastincludedterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.InstallSnapshotArguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludedindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludedterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftRpcSpace.InstallSnapshotResults) */ {
 public:
  inline InstallSnapshotResults() : InstallSnapshotResults(nullptr) {};
  virtual ~InstallSnapshotResults();

  InstallSnapshotResults(const InstallSnapshotResults& from);
  InstallSnapshotResults(InstallSnapshotResults&& from) noexcept
    : InstallSnapshotResults() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResults& operator=(const InstallSnapshotResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotResults& operator=(InstallSnapshotResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotResults* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResults*>(
               &_InstallSnapshotResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InstallSnapshotResults& a, InstallSnapshotResults& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotResults* New() const final {
    return CreateMaybeMessage<InstallSnapshotResults>(nullptr);
  }

  InstallSnapshotResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotResults& from);
  void MergeFrom(const InstallSnapshotResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftRpcSpace.InstallSnapshotResults";
  }
  protected:
  explicit InstallSnapshotResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftRpc_2eproto);
    return ::descriptor_table_raftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
  };
  // int32 Term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftRpcSpace.InstallSnapshotResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRpc_2eproto;
};
// ===================================================================

class raftRpc_Stub;

class raftRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline raftRpc() {};
 public:
  virtual ~raftRpc();

  typedef raftRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::AppendEntriesArguments* request,
                       ::raftRpcSpace::AppendEntriesResults* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::RequestVoteArguments* request,
                       ::raftRpcSpace::RequestVoteResults* response,
                       ::google::protobuf::Closure* done);
  virtual void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::InstallSnapshotArguments* request,
                       ::raftRpcSpace::InstallSnapshotResults* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(raftRpc);
};

class raftRpc_Stub : public raftRpc {
 public:
  raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~raftRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements raftRpc ------------------------------------------

  void AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::AppendEntriesArguments* request,
                       ::raftRpcSpace::AppendEntriesResults* response,
                       ::google::protobuf::Closure* done);
  void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::RequestVoteArguments* request,
                       ::raftRpcSpace::RequestVoteResults* response,
                       ::google::protobuf::Closure* done);
  void InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftRpcSpace::InstallSnapshotArguments* request,
                       ::raftRpcSpace::InstallSnapshotResults* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(raftRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// bytes Command = 1;
inline void LogEntry::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.LogEntry.Command)
  return _internal_command();
}
inline void LogEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.LogEntry.Command)
}
inline std::string* LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:raftRpcSpace.LogEntry.Command)
  return _internal_mutable_command();
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogEntry::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftRpcSpace.LogEntry.Command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftRpcSpace.LogEntry.Command)
}
inline void LogEntry::set_command(const void* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftRpcSpace.LogEntry.Command)
}
inline std::string* LogEntry::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:raftRpcSpace.LogEntry.Command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftRpcSpace.LogEntry.Command)
}
inline std::string* LogEntry::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftRpcSpace.LogEntry.Command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogEntry::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftRpcSpace.LogEntry.Command)
}

// int32 LogTerm = 2;
inline void LogEntry::clear_logterm() {
  logterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogEntry::_internal_logterm() const {
  return logterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogEntry::logterm() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.LogEntry.LogTerm)
  return _internal_logterm();
}
inline void LogEntry::_internal_set_logterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logterm_ = value;
}
inline void LogEntry::set_logterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logterm(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.LogEntry.LogTerm)
}

// int32 LogIndex = 3;
inline void LogEntry::clear_logindex() {
  logindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogEntry::_internal_logindex() const {
  return logindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogEntry::logindex() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.LogEntry.LogIndex)
  return _internal_logindex();
}
inline void LogEntry::_internal_set_logindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logindex_ = value;
}
inline void LogEntry::set_logindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logindex(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.LogEntry.LogIndex)
}

// -------------------------------------------------------------------

// AppendEntriesArguments

// int32 Term = 1;
inline void AppendEntriesArguments::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.Term)
  return _internal_term();
}
inline void AppendEntriesArguments::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void AppendEntriesArguments::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesArguments.Term)
}

// int32 LeaderId = 2;
inline void AppendEntriesArguments::clear_leaderid() {
  leaderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::leaderid() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.LeaderId)
  return _internal_leaderid();
}
inline void AppendEntriesArguments::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leaderid_ = value;
}
inline void AppendEntriesArguments::set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesArguments.LeaderId)
}

// int32 PrevLogIndex = 3;
inline void AppendEntriesArguments::clear_prevlogindex() {
  prevlogindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.PrevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesArguments::_internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prevlogindex_ = value;
}
inline void AppendEntriesArguments::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesArguments.PrevLogIndex)
}

// int32 PrevLogTerm = 4;
inline void AppendEntriesArguments::clear_prevlogterm() {
  prevlogterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.PrevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesArguments::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prevlogterm_ = value;
}
inline void AppendEntriesArguments::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesArguments.PrevLogTerm)
}

// repeated .raftRpcSpace.LogEntry Entries = 5;
inline int AppendEntriesArguments::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntriesArguments::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesArguments::clear_entries() {
  entries_.Clear();
}
inline ::raftRpcSpace::LogEntry* AppendEntriesArguments::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftRpcSpace.AppendEntriesArguments.Entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcSpace::LogEntry >*
AppendEntriesArguments::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftRpcSpace.AppendEntriesArguments.Entries)
  return &entries_;
}
inline const ::raftRpcSpace::LogEntry& AppendEntriesArguments::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raftRpcSpace::LogEntry& AppendEntriesArguments::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.Entries)
  return _internal_entries(index);
}
inline ::raftRpcSpace::LogEntry* AppendEntriesArguments::_internal_add_entries() {
  return entries_.Add();
}
inline ::raftRpcSpace::LogEntry* AppendEntriesArguments::add_entries() {
  // @@protoc_insertion_point(field_add:raftRpcSpace.AppendEntriesArguments.Entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftRpcSpace::LogEntry >&
AppendEntriesArguments::entries() const {
  // @@protoc_insertion_point(field_list:raftRpcSpace.AppendEntriesArguments.Entries)
  return entries_;
}

// int32 LeaderCommit = 6;
inline void AppendEntriesArguments::clear_leadercommit() {
  leadercommit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::_internal_leadercommit() const {
  return leadercommit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArguments::leadercommit() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesArguments.LeaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesArguments::_internal_set_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leadercommit_ = value;
}
inline void AppendEntriesArguments::set_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesArguments.LeaderCommit)
}

// -------------------------------------------------------------------

// AppendEntriesResults

// int32 Term = 1;
inline void AppendEntriesResults::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesResults.Term)
  return _internal_term();
}
inline void AppendEntriesResults::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void AppendEntriesResults::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesResults.Term)
}

// bool Success = 2;
inline void AppendEntriesResults::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResults::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResults::success() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesResults.Success)
  return _internal_success();
}
inline void AppendEntriesResults::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResults::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesResults.Success)
}

// int32 UpdateNextIndex = 3;
inline void AppendEntriesResults::clear_updatenextindex() {
  updatenextindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::_internal_updatenextindex() const {
  return updatenextindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::updatenextindex() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesResults.UpdateNextIndex)
  return _internal_updatenextindex();
}
inline void AppendEntriesResults::_internal_set_updatenextindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updatenextindex_ = value;
}
inline void AppendEntriesResults::set_updatenextindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updatenextindex(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesResults.UpdateNextIndex)
}

// int32 AppState = 4;
inline void AppendEntriesResults::clear_appstate() {
  appstate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::_internal_appstate() const {
  return appstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResults::appstate() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.AppendEntriesResults.AppState)
  return _internal_appstate();
}
inline void AppendEntriesResults::_internal_set_appstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  appstate_ = value;
}
inline void AppendEntriesResults::set_appstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appstate(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.AppendEntriesResults.AppState)
}

// -------------------------------------------------------------------

// RequestVoteArguments

// int32 Term = 1;
inline void RequestVoteArguments::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteArguments.Term)
  return _internal_term();
}
inline void RequestVoteArguments::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void RequestVoteArguments::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteArguments.Term)
}

// int32 CandidateId = 2;
inline void RequestVoteArguments::clear_candidateid() {
  candidateid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::_internal_candidateid() const {
  return candidateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::candidateid() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteArguments.CandidateId)
  return _internal_candidateid();
}
inline void RequestVoteArguments::_internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candidateid_ = value;
}
inline void RequestVoteArguments::set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteArguments.CandidateId)
}

// int32 LastLogIndex = 3;
inline void RequestVoteArguments::clear_lastlogindex() {
  lastlogindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteArguments.LastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteArguments::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastlogindex_ = value;
}
inline void RequestVoteArguments::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteArguments.LastLogIndex)
}

// int32 LastLogTerm = 4;
inline void RequestVoteArguments::clear_lastlogterm() {
  lastlogterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArguments::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteArguments.LastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteArguments::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteArguments::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteArguments.LastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteResults

// int32 Term = 1;
inline void RequestVoteResults::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteResults::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteResults::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteResults.Term)
  return _internal_term();
}
inline void RequestVoteResults::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void RequestVoteResults::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteResults.Term)
}

// bool VoteGranted = 2;
inline void RequestVoteResults::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteResults::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResults::votegranted() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteResults.VoteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResults::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteResults::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteResults.VoteGranted)
}

// int32 VoteState = 3;
inline void RequestVoteResults::clear_votestate() {
  votestate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteResults::_internal_votestate() const {
  return votestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteResults::votestate() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.RequestVoteResults.VoteState)
  return _internal_votestate();
}
inline void RequestVoteResults::_internal_set_votestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  votestate_ = value;
}
inline void RequestVoteResults::set_votestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_votestate(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.RequestVoteResults.VoteState)
}

// -------------------------------------------------------------------

// InstallSnapshotArguments

// int32 Term = 1;
inline void InstallSnapshotArguments::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotArguments.Term)
  return _internal_term();
}
inline void InstallSnapshotArguments::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void InstallSnapshotArguments::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotArguments.Term)
}

// int32 LeaderId = 2;
inline void InstallSnapshotArguments::clear_leaderid() {
  leaderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::leaderid() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotArguments.LeaderId)
  return _internal_leaderid();
}
inline void InstallSnapshotArguments::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leaderid_ = value;
}
inline void InstallSnapshotArguments::set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotArguments.LeaderId)
}

// int32 LastIncludedIndex = 3;
inline void InstallSnapshotArguments::clear_lastincludedindex() {
  lastincludedindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::_internal_lastincludedindex() const {
  return lastincludedindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::lastincludedindex() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotArguments.LastIncludedIndex)
  return _internal_lastincludedindex();
}
inline void InstallSnapshotArguments::_internal_set_lastincludedindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastincludedindex_ = value;
}
inline void InstallSnapshotArguments::set_lastincludedindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastincludedindex(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotArguments.LastIncludedIndex)
}

// int32 LastIncludedTerm = 4;
inline void InstallSnapshotArguments::clear_lastincludedterm() {
  lastincludedterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::_internal_lastincludedterm() const {
  return lastincludedterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotArguments::lastincludedterm() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotArguments.LastIncludedTerm)
  return _internal_lastincludedterm();
}
inline void InstallSnapshotArguments::_internal_set_lastincludedterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastincludedterm_ = value;
}
inline void InstallSnapshotArguments::set_lastincludedterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastincludedterm(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotArguments.LastIncludedTerm)
}

// bytes Data = 5;
inline void InstallSnapshotArguments::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstallSnapshotArguments::data() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotArguments.Data)
  return _internal_data();
}
inline void InstallSnapshotArguments::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotArguments.Data)
}
inline std::string* InstallSnapshotArguments::mutable_data() {
  // @@protoc_insertion_point(field_mutable:raftRpcSpace.InstallSnapshotArguments.Data)
  return _internal_mutable_data();
}
inline const std::string& InstallSnapshotArguments::_internal_data() const {
  return data_.Get();
}
inline void InstallSnapshotArguments::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstallSnapshotArguments::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftRpcSpace.InstallSnapshotArguments.Data)
}
inline void InstallSnapshotArguments::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftRpcSpace.InstallSnapshotArguments.Data)
}
inline void InstallSnapshotArguments::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftRpcSpace.InstallSnapshotArguments.Data)
}
inline std::string* InstallSnapshotArguments::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstallSnapshotArguments::release_data() {
  // @@protoc_insertion_point(field_release:raftRpcSpace.InstallSnapshotArguments.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstallSnapshotArguments::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftRpcSpace.InstallSnapshotArguments.Data)
}
inline std::string* InstallSnapshotArguments::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftRpcSpace.InstallSnapshotArguments.Data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstallSnapshotArguments::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftRpcSpace.InstallSnapshotArguments.Data)
}

// -------------------------------------------------------------------

// InstallSnapshotResults

// int32 Term = 1;
inline void InstallSnapshotResults::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotResults::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapshotResults::term() const {
  // @@protoc_insertion_point(field_get:raftRpcSpace.InstallSnapshotResults.Term)
  return _internal_term();
}
inline void InstallSnapshotResults::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void InstallSnapshotResults::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftRpcSpace.InstallSnapshotResults.Term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftRpcSpace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftRpc_2eproto
