// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftRpc.proto

#include "raftRpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raftRpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_raftRpc_2eproto;
namespace raftRpcSpace {
class LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry> _instance;
} _LogEntry_default_instance_;
class AppendEntriesArgumentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesArguments> _instance;
} _AppendEntriesArguments_default_instance_;
class AppendEntriesResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesResults> _instance;
} _AppendEntriesResults_default_instance_;
class RequestVoteArgumentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteArguments> _instance;
} _RequestVoteArguments_default_instance_;
class RequestVoteResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteResults> _instance;
} _RequestVoteResults_default_instance_;
class InstallSnapshotArgumentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstallSnapshotArguments> _instance;
} _InstallSnapshotArguments_default_instance_;
class InstallSnapshotResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstallSnapshotResults> _instance;
} _InstallSnapshotResults_default_instance_;
}  // namespace raftRpcSpace
static void InitDefaultsscc_info_AppendEntriesArguments_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_AppendEntriesArguments_default_instance_;
    new (ptr) ::raftRpcSpace::AppendEntriesArguments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::AppendEntriesArguments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendEntriesArguments_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendEntriesArguments_raftRpc_2eproto}, {
      &scc_info_LogEntry_raftRpc_2eproto.base,}};

static void InitDefaultsscc_info_AppendEntriesResults_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_AppendEntriesResults_default_instance_;
    new (ptr) ::raftRpcSpace::AppendEntriesResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::AppendEntriesResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesResults_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesResults_raftRpc_2eproto}, {}};

static void InitDefaultsscc_info_InstallSnapshotArguments_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_InstallSnapshotArguments_default_instance_;
    new (ptr) ::raftRpcSpace::InstallSnapshotArguments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::InstallSnapshotArguments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstallSnapshotArguments_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstallSnapshotArguments_raftRpc_2eproto}, {}};

static void InitDefaultsscc_info_InstallSnapshotResults_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_InstallSnapshotResults_default_instance_;
    new (ptr) ::raftRpcSpace::InstallSnapshotResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::InstallSnapshotResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstallSnapshotResults_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstallSnapshotResults_raftRpc_2eproto}, {}};

static void InitDefaultsscc_info_LogEntry_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_LogEntry_default_instance_;
    new (ptr) ::raftRpcSpace::LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntry_raftRpc_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteArguments_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_RequestVoteArguments_default_instance_;
    new (ptr) ::raftRpcSpace::RequestVoteArguments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::RequestVoteArguments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteArguments_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteArguments_raftRpc_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteResults_raftRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftRpcSpace::_RequestVoteResults_default_instance_;
    new (ptr) ::raftRpcSpace::RequestVoteResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftRpcSpace::RequestVoteResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteResults_raftRpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteResults_raftRpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raftRpc_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raftRpc_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_raftRpc_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raftRpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::LogEntry, command_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::LogEntry, logterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::LogEntry, logindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, leaderid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, entries_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesArguments, leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesResults, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesResults, success_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesResults, updatenextindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::AppendEntriesResults, appstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteArguments, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteArguments, candidateid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteArguments, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteArguments, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteResults, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteResults, votegranted_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::RequestVoteResults, votestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, term_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, leaderid_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, lastincludedindex_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, lastincludedterm_),
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotArguments, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftRpcSpace::InstallSnapshotResults, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raftRpcSpace::LogEntry)},
  { 8, -1, sizeof(::raftRpcSpace::AppendEntriesArguments)},
  { 19, -1, sizeof(::raftRpcSpace::AppendEntriesResults)},
  { 28, -1, sizeof(::raftRpcSpace::RequestVoteArguments)},
  { 37, -1, sizeof(::raftRpcSpace::RequestVoteResults)},
  { 45, -1, sizeof(::raftRpcSpace::InstallSnapshotArguments)},
  { 55, -1, sizeof(::raftRpcSpace::InstallSnapshotResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_AppendEntriesArguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_AppendEntriesResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_RequestVoteArguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_RequestVoteResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_InstallSnapshotArguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftRpcSpace::_InstallSnapshotResults_default_instance_),
};

const char descriptor_table_protodef_raftRpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rraftRpc.proto\022\014raftRpcSpace\">\n\010LogEntr"
  "y\022\017\n\007Command\030\001 \001(\014\022\017\n\007LogTerm\030\002 \001(\005\022\020\n\010L"
  "ogIndex\030\003 \001(\005\"\242\001\n\026AppendEntriesArguments"
  "\022\014\n\004Term\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\024\n\014Prev"
  "LogIndex\030\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022\'\n\007E"
  "ntries\030\005 \003(\0132\026.raftRpcSpace.LogEntry\022\024\n\014"
  "LeaderCommit\030\006 \001(\005\"`\n\024AppendEntriesResul"
  "ts\022\014\n\004Term\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\027\n\017Upd"
  "ateNextIndex\030\003 \001(\005\022\020\n\010AppState\030\004 \001(\005\"d\n\024"
  "RequestVoteArguments\022\014\n\004Term\030\001 \001(\005\022\023\n\013Ca"
  "ndidateId\030\002 \001(\005\022\024\n\014LastLogIndex\030\003 \001(\005\022\023\n"
  "\013LastLogTerm\030\004 \001(\005\"J\n\022RequestVoteResults"
  "\022\014\n\004Term\030\001 \001(\005\022\023\n\013VoteGranted\030\002 \001(\010\022\021\n\tV"
  "oteState\030\003 \001(\005\"}\n\030InstallSnapshotArgumen"
  "ts\022\014\n\004Term\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\031\n\021La"
  "stIncludedIndex\030\003 \001(\005\022\030\n\020LastIncludedTer"
  "m\030\004 \001(\005\022\014\n\004Data\030\005 \001(\014\"&\n\026InstallSnapshot"
  "Results\022\014\n\004Term\030\001 \001(\0052\232\002\n\007raftRpc\022Y\n\rApp"
  "endEntries\022$.raftRpcSpace.AppendEntriesA"
  "rguments\032\".raftRpcSpace.AppendEntriesRes"
  "ults\022S\n\013RequestVote\022\".raftRpcSpace.Reque"
  "stVoteArguments\032 .raftRpcSpace.RequestVo"
  "teResults\022_\n\017InstallSnapshot\022&.raftRpcSp"
  "ace.InstallSnapshotArguments\032$.raftRpcSp"
  "ace.InstallSnapshotResultsB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raftRpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raftRpc_2eproto_sccs[7] = {
  &scc_info_AppendEntriesArguments_raftRpc_2eproto.base,
  &scc_info_AppendEntriesResults_raftRpc_2eproto.base,
  &scc_info_InstallSnapshotArguments_raftRpc_2eproto.base,
  &scc_info_InstallSnapshotResults_raftRpc_2eproto.base,
  &scc_info_LogEntry_raftRpc_2eproto.base,
  &scc_info_RequestVoteArguments_raftRpc_2eproto.base,
  &scc_info_RequestVoteResults_raftRpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raftRpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftRpc_2eproto = {
  false, false, descriptor_table_protodef_raftRpc_2eproto, "raftRpc.proto", 999,
  &descriptor_table_raftRpc_2eproto_once, descriptor_table_raftRpc_2eproto_sccs, descriptor_table_raftRpc_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_raftRpc_2eproto::offsets,
  file_level_metadata_raftRpc_2eproto, 7, file_level_enum_descriptors_raftRpc_2eproto, file_level_service_descriptors_raftRpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raftRpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raftRpc_2eproto)), true);
namespace raftRpcSpace {

// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
      GetArena());
  }
  ::memcpy(&logterm_, &from.logterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&logindex_) -
    reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.LogEntry)
}

void LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntry_raftRpc_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&logterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logindex_) -
      reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntry_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&logterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logindex_) -
      reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LogTerm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          logterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          logindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Command = 1;
  if (this->command().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_command(), target);
  }

  // int32 LogTerm = 2;
  if (this->logterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logterm(), target);
  }

  // int32 LogIndex = 3;
  if (this->logindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_logindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.LogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  // int32 LogTerm = 2;
  if (this->logterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logterm());
  }

  // int32 LogIndex = 3;
  if (this->logindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.logterm() != 0) {
    _internal_set_logterm(from._internal_logterm());
  }
  if (from.logindex() != 0) {
    _internal_set_logindex(from._internal_logindex());
  }
}

void LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, logindex_)
      + sizeof(LogEntry::logindex_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, logterm_)>(
          reinterpret_cast<char*>(&logterm_),
          reinterpret_cast<char*>(&other->logterm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesArguments::InitAsDefaultInstance() {
}
class AppendEntriesArguments::_Internal {
 public:
};

AppendEntriesArguments::AppendEntriesArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.AppendEntriesArguments)
}
AppendEntriesArguments::AppendEntriesArguments(const AppendEntriesArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.AppendEntriesArguments)
}

void AppendEntriesArguments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesArguments_raftRpc_2eproto.base);
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
}

AppendEntriesArguments::~AppendEntriesArguments() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.AppendEntriesArguments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesArguments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendEntriesArguments::ArenaDtor(void* object) {
  AppendEntriesArguments* _this = reinterpret_cast< AppendEntriesArguments* >(object);
  (void)_this;
}
void AppendEntriesArguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesArguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesArguments& AppendEntriesArguments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesArguments_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.AppendEntriesArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesArguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PrevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PrevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raftRpcSpace.LogEntry Entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 LeaderCommit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesArguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.AppendEntriesArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderid(), target);
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prevlogindex(), target);
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prevlogterm(), target);
  }

  // repeated .raftRpcSpace.LogEntry Entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.AppendEntriesArguments)
  return target;
}

size_t AppendEntriesArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.AppendEntriesArguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftRpcSpace.LogEntry Entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leaderid());
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prevlogindex());
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leadercommit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesArguments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.AppendEntriesArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesArguments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesArguments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.AppendEntriesArguments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.AppendEntriesArguments)
    MergeFrom(*source);
  }
}

void AppendEntriesArguments::MergeFrom(const AppendEntriesArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.AppendEntriesArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from.prevlogindex() != 0) {
    _internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    _internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from.leadercommit() != 0) {
    _internal_set_leadercommit(from._internal_leadercommit());
  }
}

void AppendEntriesArguments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.AppendEntriesArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArguments::CopyFrom(const AppendEntriesArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.AppendEntriesArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArguments::IsInitialized() const {
  return true;
}

void AppendEntriesArguments::InternalSwap(AppendEntriesArguments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArguments, leadercommit_)
      + sizeof(AppendEntriesArguments::leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArguments, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesArguments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesResults::InitAsDefaultInstance() {
}
class AppendEntriesResults::_Internal {
 public:
};

AppendEntriesResults::AppendEntriesResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.AppendEntriesResults)
}
AppendEntriesResults::AppendEntriesResults(const AppendEntriesResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&appstate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.AppendEntriesResults)
}

void AppendEntriesResults::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
}

AppendEntriesResults::~AppendEntriesResults() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.AppendEntriesResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendEntriesResults::ArenaDtor(void* object) {
  AppendEntriesResults* _this = reinterpret_cast< AppendEntriesResults* >(object);
  (void)_this;
}
void AppendEntriesResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesResults& AppendEntriesResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesResults_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesResults::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.AppendEntriesResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UpdateNextIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updatenextindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AppState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          appstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.AppendEntriesResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 UpdateNextIndex = 3;
  if (this->updatenextindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_updatenextindex(), target);
  }

  // int32 AppState = 4;
  if (this->appstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_appstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.AppendEntriesResults)
  return target;
}

size_t AppendEntriesResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.AppendEntriesResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // bool Success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 UpdateNextIndex = 3;
  if (this->updatenextindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_updatenextindex());
  }

  // int32 AppState = 4;
  if (this->appstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_appstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.AppendEntriesResults)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.AppendEntriesResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.AppendEntriesResults)
    MergeFrom(*source);
  }
}

void AppendEntriesResults::MergeFrom(const AppendEntriesResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.AppendEntriesResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.updatenextindex() != 0) {
    _internal_set_updatenextindex(from._internal_updatenextindex());
  }
  if (from.appstate() != 0) {
    _internal_set_appstate(from._internal_appstate());
  }
}

void AppendEntriesResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.AppendEntriesResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResults::CopyFrom(const AppendEntriesResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.AppendEntriesResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResults::IsInitialized() const {
  return true;
}

void AppendEntriesResults::InternalSwap(AppendEntriesResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResults, appstate_)
      + sizeof(AppendEntriesResults::appstate_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResults, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteArguments::InitAsDefaultInstance() {
}
class RequestVoteArguments::_Internal {
 public:
};

RequestVoteArguments::RequestVoteArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.RequestVoteArguments)
}
RequestVoteArguments::RequestVoteArguments(const RequestVoteArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.RequestVoteArguments)
}

void RequestVoteArguments::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteArguments::~RequestVoteArguments() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.RequestVoteArguments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVoteArguments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestVoteArguments::ArenaDtor(void* object) {
  RequestVoteArguments* _this = reinterpret_cast< RequestVoteArguments* >(object);
  (void)_this;
}
void RequestVoteArguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteArguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteArguments& RequestVoteArguments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteArguments_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.RequestVoteArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteArguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CandidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteArguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.RequestVoteArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.RequestVoteArguments)
  return target;
}

size_t RequestVoteArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.RequestVoteArguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candidateid());
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastlogindex());
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastlogterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteArguments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.RequestVoteArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteArguments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteArguments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.RequestVoteArguments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.RequestVoteArguments)
    MergeFrom(*source);
  }
}

void RequestVoteArguments::MergeFrom(const RequestVoteArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.RequestVoteArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.candidateid() != 0) {
    _internal_set_candidateid(from._internal_candidateid());
  }
  if (from.lastlogindex() != 0) {
    _internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    _internal_set_lastlogterm(from._internal_lastlogterm());
  }
}

void RequestVoteArguments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.RequestVoteArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArguments::CopyFrom(const RequestVoteArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.RequestVoteArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArguments::IsInitialized() const {
  return true;
}

void RequestVoteArguments::InternalSwap(RequestVoteArguments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteArguments, lastlogterm_)
      + sizeof(RequestVoteArguments::lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteArguments, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteArguments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteResults::InitAsDefaultInstance() {
}
class RequestVoteResults::_Internal {
 public:
};

RequestVoteResults::RequestVoteResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.RequestVoteResults)
}
RequestVoteResults::RequestVoteResults(const RequestVoteResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votestate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.RequestVoteResults)
}

void RequestVoteResults::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votestate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
}

RequestVoteResults::~RequestVoteResults() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.RequestVoteResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVoteResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestVoteResults::ArenaDtor(void* object) {
  RequestVoteResults* _this = reinterpret_cast< RequestVoteResults* >(object);
  (void)_this;
}
void RequestVoteResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteResults& RequestVoteResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteResults_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteResults::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.RequestVoteResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votestate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool VoteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VoteState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          votestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.RequestVoteResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  // int32 VoteState = 3;
  if (this->votestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_votestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.RequestVoteResults)
  return target;
}

size_t RequestVoteResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.RequestVoteResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  // int32 VoteState = 3;
  if (this->votestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_votestate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.RequestVoteResults)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.RequestVoteResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.RequestVoteResults)
    MergeFrom(*source);
  }
}

void RequestVoteResults::MergeFrom(const RequestVoteResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.RequestVoteResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.votegranted() != 0) {
    _internal_set_votegranted(from._internal_votegranted());
  }
  if (from.votestate() != 0) {
    _internal_set_votestate(from._internal_votestate());
  }
}

void RequestVoteResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.RequestVoteResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResults::CopyFrom(const RequestVoteResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.RequestVoteResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResults::IsInitialized() const {
  return true;
}

void RequestVoteResults::InternalSwap(RequestVoteResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteResults, votestate_)
      + sizeof(RequestVoteResults::votestate_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteResults, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstallSnapshotArguments::InitAsDefaultInstance() {
}
class InstallSnapshotArguments::_Internal {
 public:
};

InstallSnapshotArguments::InstallSnapshotArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.InstallSnapshotArguments)
}
InstallSnapshotArguments::InstallSnapshotArguments(const InstallSnapshotArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastincludedterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastincludedterm_));
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.InstallSnapshotArguments)
}

void InstallSnapshotArguments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstallSnapshotArguments_raftRpc_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastincludedterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastincludedterm_));
}

InstallSnapshotArguments::~InstallSnapshotArguments() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.InstallSnapshotArguments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstallSnapshotArguments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstallSnapshotArguments::ArenaDtor(void* object) {
  InstallSnapshotArguments* _this = reinterpret_cast< InstallSnapshotArguments* >(object);
  (void)_this;
}
void InstallSnapshotArguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapshotArguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapshotArguments& InstallSnapshotArguments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstallSnapshotArguments_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapshotArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.InstallSnapshotArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastincludedterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastincludedterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotArguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastIncludedIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastincludedindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastIncludedTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastincludedterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstallSnapshotArguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.InstallSnapshotArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderid(), target);
  }

  // int32 LastIncludedIndex = 3;
  if (this->lastincludedindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastincludedindex(), target);
  }

  // int32 LastIncludedTerm = 4;
  if (this->lastincludedterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastincludedterm(), target);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.InstallSnapshotArguments)
  return target;
}

size_t InstallSnapshotArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.InstallSnapshotArguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leaderid());
  }

  // int32 LastIncludedIndex = 3;
  if (this->lastincludedindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludedindex());
  }

  // int32 LastIncludedTerm = 4;
  if (this->lastincludedterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastincludedterm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapshotArguments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.InstallSnapshotArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotArguments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstallSnapshotArguments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.InstallSnapshotArguments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.InstallSnapshotArguments)
    MergeFrom(*source);
  }
}

void InstallSnapshotArguments::MergeFrom(const InstallSnapshotArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.InstallSnapshotArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from.lastincludedindex() != 0) {
    _internal_set_lastincludedindex(from._internal_lastincludedindex());
  }
  if (from.lastincludedterm() != 0) {
    _internal_set_lastincludedterm(from._internal_lastincludedterm());
  }
}

void InstallSnapshotArguments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.InstallSnapshotArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotArguments::CopyFrom(const InstallSnapshotArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.InstallSnapshotArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotArguments::IsInitialized() const {
  return true;
}

void InstallSnapshotArguments::InternalSwap(InstallSnapshotArguments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapshotArguments, lastincludedterm_)
      + sizeof(InstallSnapshotArguments::lastincludedterm_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapshotArguments, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotArguments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstallSnapshotResults::InitAsDefaultInstance() {
}
class InstallSnapshotResults::_Internal {
 public:
};

InstallSnapshotResults::InstallSnapshotResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raftRpcSpace.InstallSnapshotResults)
}
InstallSnapshotResults::InstallSnapshotResults(const InstallSnapshotResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:raftRpcSpace.InstallSnapshotResults)
}

void InstallSnapshotResults::SharedCtor() {
  term_ = 0;
}

InstallSnapshotResults::~InstallSnapshotResults() {
  // @@protoc_insertion_point(destructor:raftRpcSpace.InstallSnapshotResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstallSnapshotResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstallSnapshotResults::ArenaDtor(void* object) {
  InstallSnapshotResults* _this = reinterpret_cast< InstallSnapshotResults* >(object);
  (void)_this;
}
void InstallSnapshotResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallSnapshotResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapshotResults& InstallSnapshotResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstallSnapshotResults_raftRpc_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapshotResults::Clear() {
// @@protoc_insertion_point(message_clear_start:raftRpcSpace.InstallSnapshotResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstallSnapshotResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftRpcSpace.InstallSnapshotResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftRpcSpace.InstallSnapshotResults)
  return target;
}

size_t InstallSnapshotResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftRpcSpace.InstallSnapshotResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapshotResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftRpcSpace.InstallSnapshotResults)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstallSnapshotResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftRpcSpace.InstallSnapshotResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftRpcSpace.InstallSnapshotResults)
    MergeFrom(*source);
  }
}

void InstallSnapshotResults::MergeFrom(const InstallSnapshotResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftRpcSpace.InstallSnapshotResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void InstallSnapshotResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftRpcSpace.InstallSnapshotResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResults::CopyFrom(const InstallSnapshotResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftRpcSpace.InstallSnapshotResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResults::IsInitialized() const {
  return true;
}

void InstallSnapshotResults::InternalSwap(InstallSnapshotResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

raftRpc::~raftRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* raftRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftRpc_2eproto);
  return file_level_service_descriptors_raftRpc_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* raftRpc::GetDescriptor() {
  return descriptor();
}

void raftRpc::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcSpace::AppendEntriesArguments*,
                         ::raftRpcSpace::AppendEntriesResults*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppendEntries() not implemented.");
  done->Run();
}

void raftRpc::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcSpace::RequestVoteArguments*,
                         ::raftRpcSpace::RequestVoteResults*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestVote() not implemented.");
  done->Run();
}

void raftRpc::InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raftRpcSpace::InstallSnapshotArguments*,
                         ::raftRpcSpace::InstallSnapshotResults*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InstallSnapshot() not implemented.");
  done->Run();
}

void raftRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raftRpc_2eproto[0]);
  switch(method->index()) {
    case 0:
      AppendEntries(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcSpace::AppendEntriesArguments*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcSpace::AppendEntriesResults*>(
                 response),
             done);
      break;
    case 1:
      RequestVote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcSpace::RequestVoteArguments*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcSpace::RequestVoteResults*>(
                 response),
             done);
      break;
    case 2:
      InstallSnapshot(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raftRpcSpace::InstallSnapshotArguments*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raftRpcSpace::InstallSnapshotResults*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& raftRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftRpcSpace::AppendEntriesArguments::default_instance();
    case 1:
      return ::raftRpcSpace::RequestVoteArguments::default_instance();
    case 2:
      return ::raftRpcSpace::InstallSnapshotArguments::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& raftRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftRpcSpace::AppendEntriesResults::default_instance();
    case 1:
      return ::raftRpcSpace::RequestVoteResults::default_instance();
    case 2:
      return ::raftRpcSpace::InstallSnapshotResults::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

raftRpc_Stub::raftRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
raftRpc_Stub::raftRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
raftRpc_Stub::~raftRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void raftRpc_Stub::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcSpace::AppendEntriesArguments* request,
                              ::raftRpcSpace::AppendEntriesResults* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void raftRpc_Stub::RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcSpace::RequestVoteArguments* request,
                              ::raftRpcSpace::RequestVoteResults* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void raftRpc_Stub::InstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raftRpcSpace::InstallSnapshotArguments* request,
                              ::raftRpcSpace::InstallSnapshotResults* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raftRpcSpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raftRpcSpace::LogEntry* Arena::CreateMaybeMessage< ::raftRpcSpace::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::AppendEntriesArguments* Arena::CreateMaybeMessage< ::raftRpcSpace::AppendEntriesArguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::AppendEntriesArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::AppendEntriesResults* Arena::CreateMaybeMessage< ::raftRpcSpace::AppendEntriesResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::AppendEntriesResults >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::RequestVoteArguments* Arena::CreateMaybeMessage< ::raftRpcSpace::RequestVoteArguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::RequestVoteArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::RequestVoteResults* Arena::CreateMaybeMessage< ::raftRpcSpace::RequestVoteResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::RequestVoteResults >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::InstallSnapshotArguments* Arena::CreateMaybeMessage< ::raftRpcSpace::InstallSnapshotArguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::InstallSnapshotArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::raftRpcSpace::InstallSnapshotResults* Arena::CreateMaybeMessage< ::raftRpcSpace::InstallSnapshotResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftRpcSpace::InstallSnapshotResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
